[{"D:\\WebstormProjects\\pipline\\src\\App.js":"1","D:\\WebstormProjects\\pipline\\src\\getHeader.js":"2","D:\\WebstormProjects\\pipline\\src\\serviceWorker.js":"3","D:\\WebstormProjects\\pipline\\src\\getDrawer.js":"4","D:\\WebstormProjects\\pipline\\src\\index.js":"5","D:\\WebstormProjects\\pipline\\src\\Login.js":"6","D:\\WebstormProjects\\pipline\\src\\login.js":"7","D:\\WebstormProjects\\pipline\\src\\register.js":"8","D:\\WebstormProjects\\pipline\\src\\data.js":"9","D:\\WebstormProjects\\pipline\\src\\log.js":"10","D:\\WebstormProjects\\pipline\\src\\getInitials.js":"11"},{"size":3557,"mtime":1607267600348,"results":"12","hashOfConfig":"13"},{"size":2420,"mtime":1606748494825,"results":"14","hashOfConfig":"13"},{"size":5872,"mtime":1606742996017,"results":"15","hashOfConfig":"13"},{"size":3707,"mtime":1606752111109,"results":"16","hashOfConfig":"13"},{"size":778,"mtime":1606833605624,"results":"17","hashOfConfig":"13"},{"size":5334,"mtime":1606833474146,"results":"18","hashOfConfig":"13"},{"size":5550,"mtime":1606834663552,"results":"19","hashOfConfig":"13"},{"size":9219,"mtime":1606834081166,"results":"20","hashOfConfig":"13"},{"size":4106,"mtime":1607430421285,"results":"21","hashOfConfig":"13"},{"size":12754,"mtime":1607444933462,"results":"22","hashOfConfig":"13"},{"size":155,"mtime":1607431782527,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"wlf73f",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\WebstormProjects\\pipline\\src\\App.js",["51","52"],"D:\\WebstormProjects\\pipline\\src\\getHeader.js",[],["53","54"],"D:\\WebstormProjects\\pipline\\src\\serviceWorker.js",[],"D:\\WebstormProjects\\pipline\\src\\getDrawer.js",["55"],"import Drawer from \"@material-ui/core/Drawer/Drawer\";\r\nimport clsx from \"clsx\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n}));\r\n\r\nfunction a11yProps(index) {\r\n    return {\r\n        id: `simple-tab-${index}`,\r\n        'aria-controls': `simple-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\n\r\n\r\nfunction GetDrawer(props) {\r\n    const classes = useStyles();\r\n    const open = props.drawerOpen;\r\n    return (\r\n        <Drawer\r\n            variant=\"permanent\"\r\n            classes={{\r\n                paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n            }}\r\n            open={open}\r\n        >\r\n            <div className={classes.toolbarIcon}>\r\n                <IconButton onClick={props.onDrawerClose}>\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n            </div>\r\n            <Divider />\r\n            <List>\r\n                <ListItem button onClick={()=>props.onTabClick(0)}>\r\n                    <ListItemIcon>\r\n                        <DashboardIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"CREATE DAG\" />\r\n                </ListItem>\r\n            </List>\r\n            <Divider />\r\n            <List>\r\n                <ListSubheader inset>DAG LOGS</ListSubheader>\r\n                <ListItem button onClick={()=>props.onTabClick(1)}>\r\n                    <ListItemIcon>\r\n                        <AssignmentIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Current month\" />\r\n                </ListItem>\r\n                <ListItem button onClick={()=>props.onTabClick(2)}>\r\n                    <ListItemIcon>\r\n                        <AssignmentIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Last quarter\" />\r\n                </ListItem>\r\n                <ListItem button onClick={()=>props.onTabClick(3)}>\r\n                    <ListItemIcon>\r\n                        <AssignmentIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Year-end sale\" />\r\n                </ListItem>\r\n            </List>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\nexport default GetDrawer;\r\n","D:\\WebstormProjects\\pipline\\src\\index.js",[],"D:\\WebstormProjects\\pipline\\src\\Login.js",["56","57"],"import React from 'react';\r\nimport { Link as RouterLink, } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    Link,\r\n    TextField,\r\n    Typography,\r\n    makeStyles\r\n} from '@material-ui/core';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.dark,\r\n        height: '100%',\r\n        paddingBottom: theme.spacing(3),\r\n        paddingTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nconst Login = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n            <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                height=\"100%\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Container maxWidth=\"sm\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: 'demo@devias.io',\r\n                            password: 'Password123'\r\n                        }}\r\n                        validationSchema={Yup.object().shape({\r\n                            email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                            password: Yup.string().max(255).required('Password is required')\r\n                        })}\r\n                        onSubmit={() => {\r\n                            window.location.href='./';\r\n                        }}\r\n                    >\r\n                        {({\r\n                              errors,\r\n                              handleBlur,\r\n                              handleChange,\r\n                              handleSubmit,\r\n                              isSubmitting,\r\n                              touched,\r\n                              values\r\n                          }) => (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <Box mb={3}>\r\n                                    <Typography\r\n                                        color=\"textPrimary\"\r\n                                        variant=\"h2\"\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Sign in\r\n                                    </Typography>\r\n                                </Box>\r\n                                <TextField\r\n                                    error={Boolean(touched.email && errors.email)}\r\n                                    fullWidth\r\n                                    helperText={touched.email && errors.email}\r\n                                    label=\"Email Address\"\r\n                                    margin=\"normal\"\r\n                                    name=\"email\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    type=\"email\"\r\n                                    value={values.email}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    error={Boolean(touched.password && errors.password)}\r\n                                    fullWidth\r\n                                    helperText={touched.password && errors.password}\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name=\"password\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    type=\"password\"\r\n                                    value={values.password}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <Box my={2}>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        disabled={isSubmitting}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Sign in now\r\n                                    </Button>\r\n                                </Box>\r\n                                <Typography\r\n                                    color=\"textSecondary\"\r\n                                    variant=\"body1\"\r\n                                >\r\n                                    Don&apos;t have an account?\r\n                                    {' '}\r\n                                    <Link\r\n                                        component={RouterLink}\r\n                                        to=\"/register\"\r\n                                        variant=\"h6\"\r\n                                    >\r\n                                        Sign up\r\n                                    </Link>\r\n                                </Typography>\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n                </Container>\r\n            </Box>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","D:\\WebstormProjects\\pipline\\src\\login.js",["58","59","60"],"import React from 'react';\r\nimport { Link as RouterLink, } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Container,\r\n    Grid,\r\n    Link,\r\n    TextField,\r\n    Typography,\r\n    makeStyles\r\n} from '@material-ui/core';\r\n\r\n// https://react-material-dashboard.devias.io/app/customers\r\n// https://demos.creative-tim.com/material-dashboard-pro-react/#/admin/extended-tables\r\n// https://demos.creative-tim.com/material-dashboard-react/#/admin/icons\r\n// https://material-ui.com/premium-themes/paperbase/\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.dark,\r\n        height: '100%',\r\n        paddingBottom: theme.spacing(3),\r\n        paddingTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nconst Login = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n            <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                height=\"100%\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Container maxWidth=\"sm\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: 'demo@devias.io',\r\n                            password: 'Password123'\r\n                        }}\r\n                        validationSchema={Yup.object().shape({\r\n                            email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                            password: Yup.string().max(255).required('Password is required')\r\n                        })}\r\n                        onSubmit={() => {\r\n                            window.location.href='./';\r\n                        }}\r\n                    >\r\n                        {({\r\n                              errors,\r\n                              handleBlur,\r\n                              handleChange,\r\n                              handleSubmit,\r\n                              isSubmitting,\r\n                              touched,\r\n                              values\r\n                          }) => (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <Box mb={3}>\r\n                                    <Typography\r\n                                        color=\"textPrimary\"\r\n                                        variant=\"h2\"\r\n                                        align=\"center\"\r\n                                    >\r\n                                        Sign in\r\n                                    </Typography>\r\n                                </Box>\r\n                                <TextField\r\n                                    error={Boolean(touched.email && errors.email)}\r\n                                    fullWidth\r\n                                    helperText={touched.email && errors.email}\r\n                                    label=\"Email Address\"\r\n                                    margin=\"normal\"\r\n                                    name=\"email\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    type=\"email\"\r\n                                    value={values.email}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    error={Boolean(touched.password && errors.password)}\r\n                                    fullWidth\r\n                                    helperText={touched.password && errors.password}\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name=\"password\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    type=\"password\"\r\n                                    value={values.password}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <Box my={2}>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        disabled={isSubmitting}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Sign in now\r\n                                    </Button>\r\n                                </Box>\r\n                                <Typography\r\n                                    color=\"textSecondary\"\r\n                                    variant=\"body1\"\r\n                                >\r\n                                    Don&apos;t have an account?\r\n                                    {' '}\r\n                                    <Link\r\n                                        href =\"/register\"\r\n                                        variant=\"h6\"\r\n                                    >\r\n                                        Sign up\r\n                                    </Link>\r\n                                </Typography>\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n                </Container>\r\n            </Box>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","D:\\WebstormProjects\\pipline\\src\\register.js",["61"],"import React from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { Formik } from 'formik';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Container,\r\n    FormHelperText,\r\n    Link,\r\n    TextField,\r\n    Typography,\r\n    makeStyles\r\n} from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.dark,\r\n        height: '100%',\r\n        paddingBottom: theme.spacing(3),\r\n        paddingTop: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nconst Register = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n            <Box\r\n                display=\"flex\"\r\n                flexDirection=\"column\"\r\n                height=\"100%\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Container maxWidth=\"sm\">\r\n                    <Formik\r\n                        initialValues={{\r\n                            email: '',\r\n                            firstName: '',\r\n                            lastName: '',\r\n                            password: '',\r\n                            policy: false\r\n                        }}\r\n                        validationSchema={\r\n                            Yup.object().shape({\r\n                                email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\r\n                                firstName: Yup.string().max(255).required('First name is required'),\r\n                                lastName: Yup.string().max(255).required('Last name is required'),\r\n                                password: Yup.string().max(255).required('password is required'),\r\n                                policy: Yup.boolean().oneOf([true], 'This field must be checked')\r\n                            })\r\n                        }\r\n                        onSubmit={() => {\r\n                            window.location.href='./login';\r\n                        }}\r\n                    >\r\n                        {({\r\n                              errors,\r\n                              handleBlur,\r\n                              handleChange,\r\n                              handleSubmit,\r\n                              isSubmitting,\r\n                              touched,\r\n                              values\r\n                          }) => (\r\n                            <form onSubmit={handleSubmit}>\r\n                                <Box mb={3}>\r\n                                    <Typography\r\n                                        color=\"textPrimary\"\r\n                                        variant=\"h2\"\r\n                                    >\r\n                                        Create new account\r\n                                    </Typography>\r\n                                    <Typography\r\n                                        color=\"textSecondary\"\r\n                                        gutterBottom\r\n                                        variant=\"body2\"\r\n                                    >\r\n                                        Use your email to create new account\r\n                                    </Typography>\r\n                                </Box>\r\n                                <TextField\r\n                                    error={Boolean(touched.firstName && errors.firstName)}\r\n                                    fullWidth\r\n                                    helperText={touched.firstName && errors.firstName}\r\n                                    label=\"First name\"\r\n                                    margin=\"normal\"\r\n                                    name=\"firstName\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    value={values.firstName}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    error={Boolean(touched.lastName && errors.lastName)}\r\n                                    fullWidth\r\n                                    helperText={touched.lastName && errors.lastName}\r\n                                    label=\"Last name\"\r\n                                    margin=\"normal\"\r\n                                    name=\"lastName\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    value={values.lastName}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    error={Boolean(touched.email && errors.email)}\r\n                                    fullWidth\r\n                                    helperText={touched.email && errors.email}\r\n                                    label=\"Email Address\"\r\n                                    margin=\"normal\"\r\n                                    name=\"email\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    type=\"email\"\r\n                                    value={values.email}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <TextField\r\n                                    error={Boolean(touched.password && errors.password)}\r\n                                    fullWidth\r\n                                    helperText={touched.password && errors.password}\r\n                                    label=\"Password\"\r\n                                    margin=\"normal\"\r\n                                    name=\"password\"\r\n                                    onBlur={handleBlur}\r\n                                    onChange={handleChange}\r\n                                    type=\"password\"\r\n                                    value={values.password}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <Box\r\n                                    alignItems=\"center\"\r\n                                    display=\"flex\"\r\n                                    ml={-1}\r\n                                >\r\n                                    <Checkbox\r\n                                        checked={values.policy}\r\n                                        name=\"policy\"\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    <Typography\r\n                                        color=\"textSecondary\"\r\n                                        variant=\"body1\"\r\n                                    >\r\n                                        I have read the\r\n                                        {' '}\r\n                                        <Link\r\n                                            color=\"primary\"\r\n                                            component={RouterLink}\r\n                                            to=\"#\"\r\n                                            underline=\"always\"\r\n                                            variant=\"h6\"\r\n                                        >\r\n                                            Terms and Conditions\r\n                                        </Link>\r\n                                    </Typography>\r\n                                </Box>\r\n                                {Boolean(touched.policy && errors.policy) && (\r\n                                    <FormHelperText error>\r\n                                        {errors.policy}\r\n                                    </FormHelperText>\r\n                                )}\r\n                                <Box my={2}>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        disabled={isSubmitting}\r\n                                        fullWidth\r\n                                        size=\"large\"\r\n                                        type=\"submit\"\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Sign up now\r\n                                    </Button>\r\n                                </Box>\r\n                                <Typography\r\n                                    color=\"textSecondary\"\r\n                                    variant=\"body1\"\r\n                                >\r\n                                    Have an account?\r\n                                    {' '}\r\n                                    <Link\r\n                                        href = './login'\r\n                                        variant=\"h6\"\r\n                                    >\r\n                                        Sign in\r\n                                    </Link>\r\n                                </Typography>\r\n                            </form>\r\n                        )}\r\n                    </Formik>\r\n                </Container>\r\n            </Box>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","D:\\WebstormProjects\\pipline\\src\\data.js",["62"],"D:\\WebstormProjects\\pipline\\src\\log.js",["63","64","65","66"],"D:\\WebstormProjects\\pipline\\src\\getInitials.js",["67"],{"ruleId":"68","severity":1,"message":"69","line":28,"column":7,"nodeType":"70","messageId":"71","endLine":28,"endColumn":18},{"ruleId":"72","severity":1,"message":"73","line":78,"column":23,"nodeType":"70","messageId":"74","endLine":78,"endColumn":24},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"68","severity":1,"message":"79","line":48,"column":10,"nodeType":"70","messageId":"71","endLine":48,"endColumn":19},{"ruleId":"68","severity":1,"message":"80","line":9,"column":5,"nodeType":"70","messageId":"71","endLine":9,"endColumn":9},{"ruleId":"68","severity":1,"message":"81","line":27,"column":11,"nodeType":"70","messageId":"71","endLine":27,"endColumn":18},{"ruleId":"68","severity":1,"message":"82","line":2,"column":18,"nodeType":"70","messageId":"71","endLine":2,"endColumn":28},{"ruleId":"68","severity":1,"message":"80","line":9,"column":5,"nodeType":"70","messageId":"71","endLine":9,"endColumn":9},{"ruleId":"68","severity":1,"message":"81","line":31,"column":11,"nodeType":"70","messageId":"71","endLine":31,"endColumn":18},{"ruleId":"68","severity":1,"message":"81","line":27,"column":11,"nodeType":"70","messageId":"71","endLine":27,"endColumn":18},{"ruleId":"83","severity":1,"message":"84","line":3,"column":1,"nodeType":"85","endLine":144,"endColumn":3},{"ruleId":"68","severity":1,"message":"86","line":5,"column":5,"nodeType":"70","messageId":"71","endLine":5,"endColumn":13},{"ruleId":"68","severity":1,"message":"87","line":15,"column":5,"nodeType":"70","messageId":"71","endLine":15,"endColumn":11},{"ruleId":"68","severity":1,"message":"80","line":30,"column":8,"nodeType":"70","messageId":"71","endLine":30,"endColumn":12},{"ruleId":"68","severity":1,"message":"88","line":60,"column":10,"nodeType":"70","messageId":"71","endLine":60,"endColumn":20},{"ruleId":"83","severity":1,"message":"89","line":1,"column":1,"nodeType":"85","endLine":6,"endColumn":15},"no-unused-vars","'drawerWidth' is assigned a value but never used.","Identifier","unusedVar","no-use-before-define","'a' was used before it was defined.","usedBeforeDefined","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'a11yProps' is defined but never used.","'Grid' is defined but never used.","'classes' is assigned a value but never used.","'RouterLink' is defined but never used.","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'Checkbox' is defined but never used.","'Button' is defined but never used.","'createData' is defined but never used.","Assign arrow function to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]